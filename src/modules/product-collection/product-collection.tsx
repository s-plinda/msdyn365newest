/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { IProductsDimensionsAvailabilities } from '@msdyn365-commerce/commerce-entities';
import { IPriceComponentResources, ProductComponent } from '@msdyn365-commerce/components';
import * as Msdyn365 from '@msdyn365-commerce/core';
import { getCatalogId, getUrlSync, ICoreContext } from '@msdyn365-commerce/core';
import { ProductPrice, ProductSearchResult } from '@msdyn365-commerce/retail-proxy';
import {
    ArrayExtensions,
    DimensionAvailabilitiesForProductSearchResultInput,
    DimensionTypes,
    DimensionSwatchDisplayTypes,
    getDimensionAvailabilitiesForProductSearchResultAction,
    getPriceForProductSearchResult,
    IDimensionsApp,
    ObjectExtensions,
    PriceForProductSearchResultInput,
    ProductPriceForSelectedProductsInput,
    validateCatalogId,
    getProductPriceForSelectedProducts
} from '@msdyn365-commerce-modules/retail-actions';
import {
    Button,
    getTelemetryObject,
    IComponentNodeProps,
    IModuleProps,
    INodeProps,
    ISingleSlideCarouselProps,
    ITelemetryContent,
    NodeTag,
    SingleSlideCarousel
} from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { IProductCollectionData } from './product-collection.data';
import { IProductCollectionProps, layout } from './product-collection.props.autogenerated';

export interface IProductCollectionViewProps extends IProductCollectionProps<IProductCollectionData> {
    heading?: React.ReactNode;
    ProductCollectionContainer: IModuleProps;
    SingleSlideCarouselComponentProps: INodeProps;
    GridComponentProps: INodeProps;
    products: IProductComponentViewProps[];
    isCarousel: boolean;
    productPrices?: ProductPrice[];
    seeAllButton?: React.ReactNode;
}

export interface IProductComponentViewProps {
    ProductContainer: INodeProps;
    productComponent: React.ReactNode;
}
export interface IProductComponentState {
    products: ProductSearchResult[];
    productPrices: ProductPrice[];
    productsDimensionAvailabilities?: IProductsDimensionsAvailabilities[][];
}

/**
 * ProductCollection component.
 */
class ProductCollection extends React.PureComponent<IProductCollectionProps<IProductCollectionData>, IProductComponentState> {
    private readonly telemetryContent: ITelemetryContent;

    private readonly productPrices: ProductPrice[];

    constructor(props: IProductCollectionProps<IProductCollectionData>) {
        super(props);
        this.productPrices = [];
        this.state = {
            products: this.props.config.productCollection.products || [],
            productPrices: this.productPrices || []
        };
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
    }

    public async componentDidMount(): Promise<void> {
        if (this.props.config.enableAffiliationBasedPricing && this.props.context.actionContext.requestContext.user.isAuthenticated) {
            await this._getActivePrice();
        }
    }

    public render(): JSX.Element | null {
        const { heading, className, shouldDisplaySeeAllButton } = this.props.config;
        const { resources } = this.props;
        const recommendation = this.props.config.productCollection.recommendationListId;
        const discountIds = this.props.config.productCollection.discountIds;

        // Initialize state in case if the products were not found during initial module render
        // eslint-disable-next-line @typescript-eslint/no-floating-promises -- Initialize data if not there.
        this.initProductState(this.props.config.productCollection);

        const products = this.state.products;
        const productPrices = this.state.productPrices;

        const isCarousel = this.props.config.layout === layout.carousel;
        const headingLabel = heading ? heading.text : '';
        const headingComponent = heading && (
            <Msdyn365.Text
                className='ms-product-collection__heading'
                tag={heading.tag || 'h1'}
                text={headingLabel}
                editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
            />
        );

        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- product check for safety.
        const updatedProducts = products?.map((item: ProductSearchResult, index: number) => {
            const getProductData = this._getProduct(
                item,
                index,
                productPrices ? productPrices.find(p => p.ProductId === item.RecordId) : undefined
            );
            return !ObjectExtensions.isNullOrUndefined(getProductData) ? getProductData : undefined;
        });

        const productCollectionViewProps = {
            ...this.props,
            heading: headingComponent,
            SingleSlideCarouselComponentProps: {
                tag: SingleSlideCarousel,
                className: '',
                flipperPrevLabel: `${headingLabel} ${resources.flipperPrevious}`,
                flipperNextLabel: `${headingLabel} ${resources.flipperNext}`,
                parentId: this.props.id,
                telemetryContent: this.telemetryContent
            } as IComponentNodeProps<ISingleSlideCarouselProps>,
            ProductCollectionContainer: {
                moduleProps: this.props,
                className: classnames('ms-product-collection', className)
            },
            GridComponentProps: {
                tag: 'ul' as NodeTag,
                className: 'ms-product-collection__items'
            },
            isCarousel,

            products:
                ArrayExtensions.hasElements(updatedProducts) &&
                updatedProducts.filter(item => {
                    return item !== undefined;
                }),
            productPrices: this.productPrices,
            seeAllButton:
                (recommendation || discountIds) &&
                shouldDisplaySeeAllButton &&
                (ArrayExtensions.hasElements(updatedProducts) || this.props.config.productCollection.listType === 'promotional')
                    ? this._getSeeAllButton(headingLabel, recommendation, discountIds)
                    : undefined,
            resources: resources
        };
        return this.props.renderView(productCollectionViewProps) as React.ReactElement;
    }

    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.heading!.text = event.target.value);

    /**
     * Get products dimension availabilities.
     * @param products - Products.
     * @returns Promise.
     */
    private readonly _getProductsDimensionsAvailabilities = async (products: ProductSearchResult[]): Promise<void> => {
        const context = this.props.context as ICoreContext<IDimensionsApp>;
        const dimensionsToDisplayOnProductCard = context.app.config.dimensionsInProductCard;
        const dimensionsToDisplayAsSwatch = context.app.config.dimensionsAsSwatchType;
        const validProducts = ArrayExtensions.validValues(products);
        if (
            ArrayExtensions.hasElements(validProducts) &&
            ArrayExtensions.hasElements(dimensionsToDisplayOnProductCard) &&
            !dimensionsToDisplayOnProductCard.includes(DimensionTypes.none) &&
            ArrayExtensions.hasElements(dimensionsToDisplayAsSwatch) &&
            !dimensionsToDisplayAsSwatch.includes(DimensionTypes.none)
        ) {
            const productsDimensionAvailabilities = await getDimensionAvailabilitiesForProductSearchResultAction(
                new DimensionAvailabilitiesForProductSearchResultInput(
                    validProducts,
                    this.props.context as ICoreContext<IDimensionsApp>,
                    DimensionSwatchDisplayTypes.productCard
                ),
                this.props.context.actionContext
            );

            if (ArrayExtensions.hasElements(productsDimensionAvailabilities)) {
                this.setState({ productsDimensionAvailabilities });
            }
        }
    };

    /**
     * Helper method to initialize products state.
     * @param productCollection - List of products.
     */
    private readonly initProductState = async (productCollection: Msdyn365.IProductList) => {
        let products = this.state.products;
        let productPrices = this.state.productPrices;
        const productCollectionProducts = productCollection.products;
        if (!ArrayExtensions.hasElements(products) && ArrayExtensions.hasElements(productCollectionProducts)) {
            products = productCollectionProducts;
            this.setState({ products });
        } else if (
            ArrayExtensions.hasElements(products) &&
            ArrayExtensions.hasElements(productCollectionProducts) &&
            !ArrayExtensions.equals(products, productCollectionProducts)
        ) {
            products = productCollectionProducts;
            this.setState({ products });
        } else if (productCollectionProducts === undefined && ArrayExtensions.hasElements(this.state.products)) {
            products = [];
            this.setState({ products: products });
        }

        if (Msdyn365.msdyn365Commerce.isBrowser && !ArrayExtensions.hasElements(this.state.productsDimensionAvailabilities)) {
            await this._getProductsDimensionsAvailabilities(products);
        }

        if (this.props.config.productCollection.listType === 'promotional') {
            productPrices = await getProductPriceForSelectedProducts(
                new ProductPriceForSelectedProductsInput(products.filter(p => !p.IsMasterProduct).map(p => p.RecordId)),
                this.props.context.actionContext
            );

            this.setState({ productPrices: productPrices });
        }
    };

    private readonly _getProduct = (
        product: ProductSearchResult,
        index: number,
        productPrice?: ProductPrice
    ): IProductComponentViewProps | null => {
        if (!product || !product.Name) {
            this.props.telemetry.trace('[product-collection] Product or product name is null');
            return null;
        }
        const telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        const { imageSettings, allowBackNavigation } = this.props.config;
        const resources = this.props.resources;
        const breaCrumbType = this.props.context.app.config.breadcrumbType;
        const allowBack = allowBackNavigation && (breaCrumbType === 'back' || breaCrumbType === 'categoryAndBack');
        const quickviewSlot =
            this.props.slots && this.props.slots.quickview && this.props.slots.quickview.length > 0 ? this.props.slots.quickview[0] : null;
        const productComparisonButtonSlot = ArrayExtensions.hasElements(this.props.slots.productComparisonButton)
            ? this.props.slots.productComparisonButton[0]
            : null;

        const reviewCount = 1;
        const reviewTotalRatings = Number(product.TotalRatings);
        const reviewCountAriaLabelValue =
            reviewTotalRatings > reviewCount ? resources.ratingCountAriaLabel : resources.ratingCountAriaLabelSingleUser;
        const isPriceMinMaxEnabled = this.props.data.featureState.result?.find(
            featureState => featureState.Name === 'Dynamics.AX.Application.RetailSearchPriceRangeFeature'
        );
        const priceResources: IPriceComponentResources = {
            priceRangeSeparator: resources.priceRangeSeparator
        };
        return {
            ProductContainer: {
                tag: 'li' as NodeTag,
                className: 'ms-product-collection__item',
                role: 'listitem',
                key: index
            },
            productComponent: (
                <ProductComponent
                    context={this.props.context}
                    telemetryContent={telemetryContent}
                    imageSettings={imageSettings}
                    freePriceText={resources.priceFree}
                    originalPriceText={resources.originalPriceText}
                    currentPriceText={resources.currentPriceText}
                    ratingAriaLabel={resources.ratingAriaLabel}
                    ratingCountAriaLabel={reviewCountAriaLabelValue}
                    allowBack={allowBack}
                    id={this.props.id}
                    typeName={this.props.typeName}
                    data={{ product, productPrice }}
                    quickViewButton={quickviewSlot}
                    productComparisonButton={productComparisonButtonSlot}
                    isPriceMinMaxEnabled={isPriceMinMaxEnabled?.IsEnabled}
                    priceResources={priceResources}
                    dimensionAvailabilities={this.state.productsDimensionAvailabilities?.find(
                        dimensionAvailability =>
                            ArrayExtensions.hasElements(dimensionAvailability) &&
                            dimensionAvailability[0].masterProductId === (product.MasterProductId ?? product.RecordId)
                    )}
                />
            )
        };
    };

    /**
     * Get the active price for products.
     */
    private readonly _getActivePrice = async (): Promise<void> => {
        const productsList = this.state.products;
        const products = await getPriceForProductSearchResult(
            new PriceForProductSearchResultInput(productsList),
            this.props.context.actionContext
        );
        if (Msdyn365.msdyn365Commerce.isBrowser) {
            await this._getProductsDimensionsAvailabilities(products);
        }

        this.setState({ products });
    };

    /**
     * Get the see all button.
     * @param headingLabel - Heading label.
     * @param recommendation - Recommendation.
     * @param discountIds - Discount Ids.
     * @returns IProductComponentSeeAllViewProps - Product component see all view props.
     */
    private readonly _getSeeAllButton = (headingLabel: string, recommendation?: string, discountIds?: string[]): React.ReactNode => {
        if (!Msdyn365.msdyn365Commerce.isBrowser) {
            return null;
        }

        if (!recommendation && !discountIds) {
            return null;
        }

        const catalogId = getCatalogId(this.props.context.request);
        validateCatalogId(catalogId);
        const searchPageLink = getUrlSync('search', this.props.context.actionContext);
        if (!searchPageLink) {
            return null;
        }

        const url = new URL(searchPageLink, window.location.href);

        if (discountIds) {
            // see all button for promotion page
            url.searchParams.set('discountIds', discountIds.toString());
            url.searchParams.set('title', headingLabel);
            url.searchParams.set('catalogid', `${catalogId}`);
        } else if (recommendation) {
            // See all button for recommendation
            url.searchParams.set('recommendation', recommendation);
            url.searchParams.set('title', headingLabel);
            url.searchParams.set('catalogid', `${catalogId}`);
        }

        return (
            <Button
                className='ms-product-collection__see-all-btn msc-cta__primary'
                title={this.props.resources.seeAllButtonText}
                href={url.href}
            >
                {this.props.resources.seeAllButtonText}
            </Button>
        );
    };
}

export default ProductCollection;
