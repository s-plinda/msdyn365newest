/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { ICoreContext, IGridSettings, IImageData, IImageSettings, Image, IRequestContext } from '@msdyn365-commerce/core';
import { SimpleProduct } from '@msdyn365-commerce/retail-proxy';
import { getFallbackImageUrl, getProductPageUrlSync } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryAttributes, ITelemetryContent, onTelemetryClick } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ISearchResultContainerResources } from '../search-result-container.props.autogenerated';

// Import { IComponent, IComponentProps, ICoreContext, IGridSettings, IImageData, IImageSettings, Image, msdyn365Commerce } from '@msdyn365-commerce/core';

interface IFeatureSearchResultItem {
    product: SimpleProduct | null;
    context: ICoreContext;
    resources: ISearchResultContainerResources;
    imageSettings?: IImageSettings;
    moduleType: string;
    moduleId: string;
    telemetryContent?: ITelemetryContent;
    recommendation?: string;
}

export const FeatureSearchResultItem: React.FC<IFeatureSearchResultItem> = ({
    product,
    context,
    imageSettings,
    resources,
    telemetryContent,
    recommendation
}) => {
    if (product === null) {
        return null;
    }

    const productName = product.Name;
    const productRecordId = product && product.RecordId ? product.RecordId : 0;
    const productUrl = getProductPageUrlSync(product.Name || '', productRecordId, context && context.actionContext, undefined);
    const fallbackImage = getFallbackImageUrl(
        product.ItemId,
        context.actionContext.requestContext.apiSettings,
        context.request.app?.config?.OmniChannelMedia
    );
    const heading =
        recommendation && recommendation === 'descriptions' ? resources.featureSimilarDescriptionTitle : resources.featureSimilarLooksTitle;

    // Construct telemetry attribute to render
    const payLoad = getPayloadObject('click', telemetryContent!, productName!, productRecordId.toString());

    const attribute = getTelemetryAttributes(telemetryContent!, payLoad);
    return (
        <div className='ms-feature-search-result__item'>
            <a
                href={productUrl}
                onClick={onTelemetryClick(telemetryContent!, payLoad, product.Name!)}
                {...attribute}
                aria-label={product.Name}
            >
                <div className='msc-feature-search-result__item__image'>
                    {renderProductPlacementImage(
                        imageSettings,
                        context.request.gridSettings,
                        product.PrimaryImageUrl,
                        product.Name,
                        fallbackImage,
                        context.actionContext.requestContext
                    )}
                </div>
            </a>
            <div className='msc-feature-search-result__item__detail'>
                <p className='msc-feature-search-result__item__heading'>{heading}</p>
                {renderProductTitle(product?.Name)}
            </div>
        </div>
    );
};

function renderProductPlacementImage(
    imageSettings?: IImageSettings,
    gridSettings?: IGridSettings,
    imageUrl?: string,
    altText?: string,
    fallbackImage?: string,
    context?: IRequestContext
): JSX.Element | null {
    if (!imageUrl || !gridSettings || !imageSettings) {
        return null;
    }
    const img: IImageData = {
        src: imageUrl,
        altText: altText ? altText : ''
    };
    const imageProps = {
        gridSettings,
        imageSettings,
        fallBackSrc: fallbackImage
    };
    return <Image {...img} {...imageProps} loadFailureBehavior='empty' requestContext={context} />;
}

function renderProductTitle(title?: string): JSX.Element | null {
    return <h1 className='msc-feature-search-result__item__product-title'>{title}</h1>;
}
