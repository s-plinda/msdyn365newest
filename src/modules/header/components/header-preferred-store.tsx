/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { ArrayExtensions } from '@msdyn365-commerce-modules/retail-actions';
import { observer } from 'mobx-react';
import * as React from 'react';

import { IHeaderData } from '../header.data';
import { IHeaderProps } from '../header.props.autogenerated';

/**
 * The header preferred store component.
 */
@observer
export class HeaderPreferredStore extends React.PureComponent<IHeaderProps<IHeaderData>> {
    private readonly modalCloseButtonRef: React.RefObject<HTMLButtonElement> = React.createRef();

    /**
     * Handle click on the store selector.
     * @returns : Promise void.
     */
    public handleClick = () => {
        return this._findPreferredStoreOnClick(this.props);
    };

    public render(): JSX.Element | undefined {
        const {
            data: {
                storeSelectorStateManager: { result: storeSelectorStateManager }
            },
            slots,
            resources
        } = this.props;

        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- slots can be undefined.
        if (ArrayExtensions.hasElements(slots?.storeSelector)) {
            const storeName =
                storeSelectorStateManager?.preferredStore && storeSelectorStateManager.preferredStore.StoreName
                    ? storeSelectorStateManager.preferredStore.StoreName
                    : resources.headerPreferredStoreText;

            return (
                <div className='ms-header__preferred-store-container'>
                    <button
                        className='ms-header__preferred-store-btn msc-btn'
                        color='secondary'
                        aria-label={resources.headerPreferredStoreAriaLabel}
                        onClick={this.handleClick}
                        ref={this.modalCloseButtonRef}
                    >
                        <span className='ms-header__preferred-store-text'>{storeName}</span>
                    </button>
                    {slots.storeSelector}
                </div>
            );
        }

        return undefined;
    }

    private async _findPreferredStoreOnClick(props: IHeaderProps<IHeaderData>): Promise<void> {
        const {
            data: {
                storeSelectorStateManager: { result: storeSelectorStateManager }
            },
            modules
        } = props;
        if (!storeSelectorStateManager) {
            return;
        }
        let storeSelectorId: string = '';
        if (modules && Object.keys(modules).length > 0 && ArrayExtensions.hasElements(modules.storeSelector)) {
            storeSelectorId = modules.storeSelector[0].id;
        }
        await storeSelectorStateManager
            .openDialog({
                id: storeSelectorId,
                showMapViewLink: true,
                parentElementRef: this.modalCloseButtonRef,
                onLocationSelected: orgUnitLocation => {
                    return Promise.resolve();
                }
            })
            .catch((error: Error) => {
                if (props.telemetry) {
                    props.telemetry.error(error.message);
                    props.telemetry.debug('Unable to set preferred store');
                }
            });
    }
}

export default HeaderPreferredStore;
