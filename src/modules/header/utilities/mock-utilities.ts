/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { buildHydratedMockActionContext, buildMockRequest, ICoreContext, IRequestContext } from '@msdyn365-commerce/core';
import { ICartState } from '@msdyn365-commerce/global-state';
import { AsyncResult, Customer, Employee } from '@msdyn365-commerce/retail-proxy';
import { IStoreSelectorStateManager } from '@msdyn365-commerce-modules/bopis-utilities';

import { IHeaderData } from '../header.data';
import { IHeaderConfig, IHeaderResources } from '../header.props.autogenerated';

const mockRequest: IRequestContext = buildMockRequest();
const mockRequestURL = {
    requestUrl: new URL('https://wwww.example.com'),
    staticCdnUrl: 'https://wwww.example.com'
};
mockRequest.gridSettings = {
    xs: { w: 767, h: 0 },
    sm: { w: 991, h: 0 },
    md: { w: 1199, h: 0 },
    lg: { w: 1599, h: 0 },
    xl: { w: 1600, h: 0 }
};
mockRequest.user.isAuthenticated = true;
mockRequest.user.signInUrl = '/signin';
mockRequest.user.signOutUrl = '/signout';
mockRequest.user.signUpUrl = '/signup';

const mockAnonRequest = buildMockRequest();
mockAnonRequest.user.isAuthenticated = false;
mockAnonRequest.user.signInUrl = '/signin';
mockAnonRequest.user.signOutUrl = '/signout';
mockAnonRequest.user.signUpUrl = '/signup';
mockAnonRequest.url = mockRequestURL;

const mockSigninErrorRequest = buildMockRequest();
mockSigninErrorRequest.user.isAuthenticated = false;
mockSigninErrorRequest.user.retailServerErrorCode = 'Microsoft_Dynamics_Commerce_Runtime_CustomerNotFound_WhenAutoLinking';
mockSigninErrorRequest.user.signInUrl = '/signin';
mockSigninErrorRequest.user.signOutUrl = '/signout';
mockSigninErrorRequest.user.signUpUrl = '/signup';
mockSigninErrorRequest.url = mockRequestURL;

const mockActionContext = buildHydratedMockActionContext();
mockActionContext.requestContext.url = mockRequestURL;

/**
 * Method to mock auth context.
 */
// @ts-expect-error
export const mockAuthContext: ICoreContext = {
    actionContext: mockActionContext,
    request: mockRequest,
    app: {
        config: {
            disableTooltip: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};

// @ts-expect-error
export const mockAnonContext: ICoreContext = {
    actionContext: mockActionContext,
    request: mockAnonRequest,
    app: {
        config: {
            disableTooltip: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};

// eslint-disable-next-line @typescript-eslint/ban-ts-comment -- Due to partial mock.
// @ts-expect-error
export const mockSigninContext: ICoreContext = {
    actionContext: mockActionContext,
    request: mockSigninErrorRequest,
    app: {
        config: {
            disableTooltip: true
        },
        routes: {
            wishlist: '/wishlist'
        }
    }
};

export const mockHeaderConfig: IHeaderConfig = {
    logoLink: {
        linkUrl: {
            destinationUrl: 'https://ppe.fabrikam.com/fe'
        },
        ariaLabel: 'fabrikam'
    },
    logoImage: {
        src: 'https://img-prod-cms-mr-microsoft-com.akamaized.net/cms/api/fabrikam/imageFileData/MA1G3L'
    }
};

export const mockResources: IHeaderResources = {
    mobileHamburgerAriaLabel: 'Mobile view hamburger aria label',
    wishlistTooltipText: 'My wishlist',
    cartLabel: 'Shopping bag, ({0}) items',
    cartQtyLabel: '({0})',
    signInLinkText: 'Sign In',
    signInLinkAriaText: 'Sign In',
    signOutLinkText: 'Sign Out',
    signOutLinkAriaText: 'Sign Out',
    shoppingAsText: 'Shopping as {0}',
    switchCustomerLinkText: 'Switch customer',
    switchCustomerLinkAriaText: 'Switch customer',
    headerPreferredStoreText: 'Select store',
    headerPreferredStoreAriaLabel: 'select preferred store',
    signInCustomerNotAuthorizedTitle: 'Error message if customer not authorized',
    signUpCustomerNotFoundTitle: 'Error message if cutsomer not found',
    signUpMultipleCustomerFoundTitle: 'Multiple customer found error msg',
    closeNotificationLabel: 'Close',
    wishlistCountLabel: '({0})',
    headerAriaLabel: 'Header'
};

export const getMockData = (totalItemsInCart: number = 0, accountNumber: string = '2', firstName: string = ''): IHeaderData => {
    return {
        cart: <AsyncResult<ICartState>>{
            status: 'SUCCESS',
            result: {
                totalItemsInCart
            }
        },
        employee: <AsyncResult<Employee>>{
            status: 'SUCCESS',
            result: {
                Name: 'Worker'
            }
        },
        accountInformation: <AsyncResult<Customer>>{
            status: 'SUCCESS',
            result: {
                AccountNumber: accountNumber,
                FirstName: firstName
            }
        },
        storeSelectorStateManager: <AsyncResult<IStoreSelectorStateManager>>{
            status: 'SUCCESS',
            result: {}
        }
    };
};

export const getMockErrorData = (): IHeaderData => {
    return {
        cart: <AsyncResult<ICartState>>{
            status: 'FAILED',
            result: undefined
        },
        employee: <AsyncResult<Employee>>{
            status: 'FAILED',
            result: undefined
        },
        accountInformation: <AsyncResult<Customer>>{
            status: 'FAILED',
            result: undefined
        },
        storeSelectorStateManager: <AsyncResult<IStoreSelectorStateManager>>{
            status: 'FAILED',
            result: undefined
        }
    };
};
