/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { IOrderSummaryLines, OrderSummary } from '@msdyn365-commerce-modules/order-summary-utilities';
import { INodeProps } from '@msdyn365-commerce-modules/utilities';
import get from 'lodash/get';
import * as React from 'react';

import { ICheckoutData } from '../checkout.data';
import { ICheckoutProps } from '../checkout.props.autogenerated';

export interface IOrderSummary {
    orderSummaryProps: INodeProps;
    heading?: React.ReactNode;
    lines?: IOrderSummaryLines;
}
export const getOrderSummary = (input: ICheckoutProps<ICheckoutData>): IOrderSummary => {
    const {
        config: { orderSummaryHeading },
        data: { checkout },
        resources: {
            subTotalLabel,
            shippingLabel,
            taxLabel,
            orderTotalLabel,
            loyaltyLabel,
            giftcardLabel,
            totalDiscountsLabel,
            freeText,
            toBeCalculatedText,
            otherCharges,
            customerAccountLabel
        },
        context,
        typeName,
        id,
        telemetry
    } = input;

    const checkoutState = get(checkout, 'result');
    const cart = get(checkout, 'result.checkoutCart.cart');
    const showLineItems = cart.CartLines && cart.CartLines.length > 0;
    const channelConfiguration = context.request.channel!;
    const multiplePickupStoreSwitchName = 'Dynamics.AX.Application.RetailMultiplePickupDeliveryModeFeature';
    const { channelDeliveryOptionConfig, featureState } = input.data;
    const retailMultiplePickUpOptionEnabled = featureState?.result?.find(feature => feature.Name === multiplePickupStoreSwitchName)
        ?.IsEnabled;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- app configs are of generic type
    const isShowOrHideTaxEnabled = context.request.app.config.isEnableShowOrHideSalesTaxECommerceEnabled === true;

    const handleOrderSummaryHeadingChange = (event: Msdyn365.ContentEditableEvent) => {
        const {
            config: { orderSummaryHeading }
        } = input;
        if (orderSummaryHeading) {
            orderSummaryHeading.text = event.target.value;
        }
    };

    return {
        orderSummaryProps: { className: 'ms-checkout-guest-profile__selected-item' },
        heading: orderSummaryHeading && orderSummaryHeading.text && (
            <Msdyn365.Text
                className='msc-order-summary__heading'
                {...orderSummaryHeading}
                tag={orderSummaryHeading.tag || 'h2'}
                text={orderSummaryHeading.text}
                editProps={{ onEdit: handleOrderSummaryHeadingChange, requestContext: context.request }}
            />
        ),
        lines: showLineItems
            ? OrderSummary({
                  checkoutState,
                  cart,
                  subTotalLabel,
                  shippingLabel,
                  taxLabel,
                  orderTotalLabel,
                  loyaltyLabel,
                  giftcardLabel,
                  totalDiscountsLabel,
                  freeText,
                  toBeCalculatedText,
                  context,
                  typeName,
                  id,
                  channelConfiguration,
                  telemetry,
                  otherChargeLabel: otherCharges,
                  retailMultiplePickUpOptionEnabled,
                  channelDeliveryOptionConfig: channelDeliveryOptionConfig?.result,
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- existing property.
                  isTaxIncludedInPrice: cart.IsTaxIncludedInPrice,
                  isShowTaxBreakup: isShowOrHideTaxEnabled,
                  customerAccountLabel
              })
            : undefined
    };
};
